# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy Environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  create_infrastructure:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: amazon/aws-cli
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: "Create Cloudformation Stack"
          command: |
            aws cloudformation deploy  \
            --template-file template.yml \
            --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
            --region us-east-1
      - run: echo "[all]" > host
      - run:
          name: "Retrieve Host Public Ip"
          command: |
            aws ec2 describe-instances --query 'Reservations[].Instances[].PublicIpAddress[]' \
            --output text >> host
      - persist_to_workspace:
          root: .
          paths:
            - host
    
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli

    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="my-${CIRCLE_WORKFLOW_ID:0:7}-bucket"
      - run: aws s3 sync . s3://my-${CIRCLE_WORKFLOW_ID:0:7}-bucket --delete

  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - add_ssh_keys:
          fingerprints: ["06:41:67:ae:de:8c:36:7d:51:79:3c:47:38:01:0f:05"]
      - run:
          name: Install dependencies
          command: | 
            apk add --update ansible
      - run:
          name: Configure the servers
          command: |
            ansible-playbook -i ./host main-remote.yml

  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli

    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save he old pipeline ID (bucket name) reponsible for the last release
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - textfile.txt

  smoke_test:
    docker:
      - image: amazon/aws-cli
    steps:
      #- checkout
      - run:
          name: Simulate Error
          command: |
            return 1 #Simulates an error that causes job failure.
      - destroy_environment

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="my-${CIRCLE_WORKFLOW_ID:0:7}"

  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous s3 bucket and cloudformation stack
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  promote-to-prod-workflow:
    jobs:
      #- create_infrastructure
      #- configure_infrastructure:
      #    requires: [create_infrastructure]
      #- smoke_test:
      #    requires: [create_infrastructure]
      - create_and_deploy_front_end
      - promote_to_production:
          requires:
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production
      
