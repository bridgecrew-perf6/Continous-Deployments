# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  create_infrastructure:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: amazon/aws-cli
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: "Create Cloudformation Stack"
          command: |
            aws cloudformation deploy  \
            --template-file template.yml \
            --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
            --region us-east-1
      - run: echo "[all]" > host
      - run:
          name: "Retrieve Host Public Ip"
          command: |
            aws ec2 describe-instances --query 'Reservations[].Instances[].PublicIpAddress[]' \
            --output text >> host
      - run: cat host
      - persist_to_workspace:
          root: .
          paths:
            - host
    

  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - add_ssh_keys:
          fingerprints: ["06:41:67:ae:de:8c:36:7d:51:79:3c:47:38:01:0f:05"]
      - run:
          name: Install dependencies
          command: | 
            apk add --update ansible
      - run:
          name: Configure the servers
          command: |
            ansible-playbook -i ./host main-remote.yml

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      - create_infrastructure
      - configure_infrastructure:
          requires: [create_infrastructure]
